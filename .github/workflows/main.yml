name: Build and Deploy IMMAI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate database schema
        run: pnpm db:generate

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm exec tsc --noEmit

      - name: Build application
        run: pnpm build:ci
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker buildx build --platform linux/amd64 -t immai:latest --load .

      - name: Save Docker image to tar.gz
        run: docker save immai:latest | gzip > immai.tar.gz

      - name: Copy image to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "immai.tar.gz"
          target: "/root/docker-images/immai/"

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /root/docker-images/immai/
            
            # Clean up existing resources
            echo "Cleaning up existing containers and processes..."
            docker stop immai 2>/dev/null || true
            docker rm -f immai 2>/dev/null || true
            
            # Kill any processes using port 3000
            sudo lsof -ti:3000 | xargs sudo kill -9 2>/dev/null || true
            
            # Clean up Docker system
            docker system prune -f
            
            # Load new image
            echo "Loading new Docker image..."
            gunzip -f immai.tar.gz
            docker load -i immai.tar
            
            # Start new container with proper environment variables
            echo "Starting new container..."
            docker run -d --name immai -p 3000:3000 --restart unless-stopped \
              -e DATABASE_URL="${DATABASE_URL}" \
              -e NEXTAUTH_SECRET="${NEXTAUTH_SECRET}" \
              -e NEXTAUTH_URL="${NEXTAUTH_URL}" \
              -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
              -e STRIPE_SECRET_KEY="${STRIPE_SECRET_KEY}" \
              -e STRIPE_PUBLISHABLE_KEY="${STRIPE_PUBLISHABLE_KEY}" \
              -e STRIPE_WEBHOOK_SECRET="${STRIPE_WEBHOOK_SECRET}" \
              immai:latest
            
            # Wait for container to be ready
            echo "Waiting for container to start..."
            sleep 10
            
            # Check container status
            if docker ps | grep -q immai; then
              echo "Container started successfully"
              
              # Run database migrations
              echo "Running database migrations..."
              docker exec immai pnpm db:migrate || echo "Migration failed, but continuing..."
              
              # Verify application is responding
              echo "Checking application health..."
              sleep 5
              curl -f http://localhost:3000 > /dev/null 2>&1 && echo "Application is healthy" || echo "Application may not be responding yet"
            else
              echo "Failed to start container"
              docker logs immai || true
              exit 1
            fi
